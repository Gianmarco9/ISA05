SCRIPT MANUAL:

###############################################################################
BASH SCRIPTS:
	exe2_1.sh: Starts the first part of the laboratory assignment,
		consisting of testing the given floating point multiplier and
		checking the synthesized solution of Synopsys, obtained thanks
		to different compile commands & different adder architectures.
		Note: this script relies on the Bash scripts: comp_and_sim.sh 
		and start_syn1.sh. 
	exe2_2.sh: Starts the second part of the laboratory assignment,
		consisting of synthesizing the basic floating point multiplier
		using the built-in optimizing tools of Synopsys.
		Note: this script relies on comp_and_sim.sh and start_syn2.sh.
	exe2_3.sh: Starts the third part of the laboratory assignment, 
		consising of synthesizing the multiplier implemented as a 
		Modified Booth Encoding paired paired with a Dadda-tree multi-
		operand adder, in both the cases of retiming and compile-ultra
		Synopsys'commands.
		Note: this script relies on comp_and_sim.sh and start_syn3.sh.
	comp_and_sim.sh: Initializes Modelsim, compiles and simulate the HDL
		files sourced in the order specified by the input file given
		as argument. The simulation script is automatically computed
		thanks to a postfix relation with the argument's compile file.
		Note: -dbg simulates using Modelsim's GUI, -nogui in batch mode.
	start_syn1.sh: Synthesize using Synopsys the basic FP multiplier 
		architecture by forcing different architectures for the 
		behavioral multiplier: no forcing, CSA and PPARCH. All are 
		synthesized at maximum performance: this is performed by 
		iteratively call the synth procedure and updating the clock
		period adding the unmet slack of the previous iteration. Every
		synthesis relies on its TCL script.
		The arguments of this script are the initial clock periods, in
		case the clock period is almost known and thus relaxing the 
		synthesis.
	start_syn2.sh: Similar to the previous script, but performs two 
		synthesis on the optimized FP multiplier (registers between 
		multiplier stages): the former is based on the command 
		"optimize_registers" and the latter on "compile_ultra".
		The iterative structure is the same as the previous script.
	start_syn3.sh: Similar to the previous script, but this time the 
		multiplier is implemented as a Modified Booth Recoding followed 
		by a Dadda tree multioperand adder.
		Note: This script relies on matrix_filler.py and dadda_tree 
		python scripts.

###############################################################################
PYTHON SCRIPTS:
	matrix_filler.py: This script is used to write on the input_matrix.txt
		file the matrix as a list of list of signals. These signals are
		the input port matrix (array of std_logic_vector). This script
		indicizes this port in an automatic way into the file in column
		order, in order to have an easy and readable algorthm for the
		next script.
		The argument of this script is the length in bits of the 
		operands.
	dadda_tree.py: This script automatically generates a Dadda tree adder
		based on the matrix generated by the previous script. The 
		generated VHDL present large amount of signal names since in 
		order to easy detect signal by names, std_logic type is used.
		The arguments of this script are the operands'length in bits 
		and the radix factor of MBE.
	random_gen.py: Generates random input numbers, and 2 imposed cases, and
		calculates the ideal result file, which will be compared with
		the result of the simulation.
		The arguments of this script are the operands'length in bits 
		and the number of random input data.

###############################################################################
TCL SCRIPTS:
	synth.tcl: Synthesize procedure having as input arguments "entity", 
		"architecture", "analyze", "option" and "arch_mul".
		These parameters are used to route specific behaviors:
			- "entity" targets the entity of the "elaborate" 
				command.
			- "architecture" targets the architecture of "elaborate"
				command.
			- "analyze" targets the specific analyze_order<x>.do 
				file to be sourced.
			- "option" targets a specific compile command version.
			- "arch_mul" targets a specific multipl. implementation.
	syn_basic.tcl: Sources synth.tcl and calls the synth procedure giving
		"FPmul", "pipeline", "null", "basic" and "null" as arguments.
		This results in a simple synthesis.
	syn_w_csa.tcl: Sources synth.tcl and calls the synth procedure giving
		"FPmul", "pipeline", "null", "set_arch" and "csa" as arguments.
		This results in a synthesis using CSA as adder.
	syn_w_pparch.tcl: Sources synth.tcl and calls the synth procedure giving
		"FPmul", "pipeline", "null", "set_arch" and "pparch" as 
		arguments.
		This results in a synthesis using a parallel-prefix adder.
	syn_retiming.tcl: Sources synth.tcl and calls the synth procedure
		giving "FPmul", "pipeline", "opt", "retiming" and "null" as 
		arguments.
		This results in a synthesis using a pipelined architecture and
		re-timed in order to reduce path issues.
	syn_ultra.tcl: Sources synth.tcl and calls the synth procedure giving√π
		"FPmul", "pipeline", "opt", "ultra" and "null" as arguments.
		This results in an overall optimized implementation.
	syn_FPmbe_retiming.tcl: Sources synth.tcl and calls the synth procedure
		giving "FPmbe", "pipeline", "FPmbe", "retiming" and "null" as
		arguments.
		This results in a synthesis which reorders the register on path
		in order to increase performance of the Modified Booth Encoding
		paire with a Dadda-tree based multi-operand adder.
	syn_FPmbe_ultra.tcl: Sources synth.tcl and calls the synth procedure
		giving "FPmbe" "pipeline" "FPmbe" "ultra" "null" as arguments.
		This results in an overall optimized implementation of the
		custom Modified Booth Encoding paired with a Dadda-tree based
		multi-operand adder.


###############################################################################
GENERIC AUTOMATION FILES:
	compile_order<_postfix>: These files contain the HDL source filenames
		and their relative path in a single string format, already
		ordered in an hierarchical way.
	simulate<_postfix>.do: These files contain the Modelsim commands to be
		sourced in an automated way during batch-mode simulation.
	analyze_order<_postfix>.do: These files contains the Synopsys "analyze" 
		commands and their respective HDL files (with their relative 
		paths) in hierarchical order. These are sourced inside the 
		synth.tcl script using their respective postfix as selector.
